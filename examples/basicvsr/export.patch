diff --git a/mmedit/models/backbones/sr_backbones/basicvsr_net.py b/mmedit/models/backbones/sr_backbones/basicvsr_net.py
index 5794854..9806a3c 100644
--- a/mmedit/models/backbones/sr_backbones/basicvsr_net.py
+++ b/mmedit/models/backbones/sr_backbones/basicvsr_net.py
@@ -166,6 +166,27 @@ class BasicVSRNet(nn.Module):
 
         return torch.stack(outputs, dim=1)
 
+    def backward_residual(self, lr_curr, feat_prop):
+        feat_prop = torch.cat([lr_curr, feat_prop], dim=1)
+        feat_prop = self.backward_resblocks(feat_prop)
+        return feat_prop
+
+    def forward_residual(self, lr_curr, feat_prop):
+        feat_prop = torch.cat([lr_curr, feat_prop], dim=1)
+        feat_prop = self.forward_resblocks(feat_prop)
+        return feat_prop
+
+    def forward_upsample(self, lr_curr, feat_prop_forward, feat_prop_backward):
+        out = torch.cat([feat_prop_backward, feat_prop_forward], dim=1)
+        out = self.lrelu(self.fusion(out))
+        out = self.lrelu(self.upsample1(out))
+        out = self.lrelu(self.upsample2(out))
+        out = self.lrelu(self.conv_hr(out))
+        out = self.conv_last(out)
+        base = self.img_upsample(lr_curr)
+        out += base
+        return out
+
     def init_weights(self, pretrained=None, strict=True):
         """Init weights for models.
 
diff --git a/tools/export_basicvsr.py b/tools/export_basicvsr.py
new file mode 100644
index 0000000..822bb5b
--- /dev/null
+++ b/tools/export_basicvsr.py
@@ -0,0 +1,100 @@
+import argparse
+
+from mmedit.apis import init_model, restoration_video_inference
+
+import torch
+from mmcv.onnx import register_extra_symbolics
+from mmedit.models.backbones.sr_backbones.basicvsr_net import SPyNet, BasicVSRNet
+
+def parse_args():
+    parser = argparse.ArgumentParser(description='Convert BasicVSR to ONNX')
+    parser.add_argument('config', help='test config file path')
+    parser.add_argument('checkpoint', help='checkpoint file')
+    parser.add_argument('--device', type=int, default=0, help='CUDA device id')
+    parser.add_argument('--spy-output', required=True, help='SPyNet output file name')
+    parser.add_argument('--backward-residual-output', required=True, help='Backward residual output file name')
+    parser.add_argument('--forward-residual-output', required=True, help='Forward residual output file name')
+    parser.add_argument('--upsample-output', required=True, help='Forward residual output file name')
+    args = parser.parse_args()
+    return args
+
+def main():
+    args = parse_args()
+    model = init_model(
+        args.config, args.checkpoint, device=torch.device('cpu'))
+    basicvsr = model.generator
+    spynet = basicvsr.spynet
+    spynet.forward = spynet.compute_flow
+    spynet.eval()
+    dummy_data = tuple(torch.rand((40, 3, 160, 192)).to('cpu') for i in range(2))
+
+    if args.spy_output.endswith('.onnx'):
+        opset_version = 12
+        register_extra_symbolics(opset_version)
+        spynet_input_axes = {0: 'batch', 2: 'height', 3: 'width'}
+        torch.onnx.export(
+            spynet,
+            dummy_data,
+            args.spy_output,
+            input_names=['a', 'b'],
+            dynamic_axes=dict(
+                a=spynet_input_axes,
+                b=spynet_input_axes),
+            output_names=['output'],
+            verbose=True,
+            opset_version=opset_version)
+    else:
+        torch.jit.trace(spynet, dummy_data).save(args.spy_output)
+
+    mid_channels = 64
+    dummy_lr = torch.rand((1, 3, 144, 180)).to('cpu')
+    dummy_feat_prop = torch.rand((1, mid_channels, 144, 180)).to('cpu')
+    basicvsr.eval()
+    basicvsr.forward = basicvsr.backward_residual
+    if args.backward_residual_output.endswith('.onnx'):
+        br_input_axes = {0: 'batch', 2: 'height', 3: 'width'}
+        torch.onnx.export(
+            basicvsr,
+            (dummy_lr, dummy_feat_prop),
+            args.backward_residual_output,
+            input_names=['a', 'b'],
+            output_names=['output'],
+            dynamic_axes=dict(
+                a=br_input_axes,
+                b=br_input_axes),
+            verbose=True,
+            opset_version=opset_version)
+    else:
+        torch.jit.trace(basicvsr, (dummy_lr, dummy_feat_prop)).save(args.backward_residual_output)
+    basicvsr.forward = basicvsr.forward_residual
+    if args.forward_residual_output.endswith('.onnx'):
+        fr_input_axes = {0: 'batch', 2: 'height', 3: 'width'}
+        torch.onnx.export(
+            basicvsr,
+            (dummy_lr, dummy_feat_prop),
+            args.forward_residual_output,
+            dynamic_axes=dict(
+                a=fr_input_axes,
+                b=fr_input_axes),
+            input_names=['a', 'b'],
+            output_names=['output'],
+            verbose=True,
+            opset_version=opset_version)
+    else:
+        torch.jit.trace(basicvsr, (dummy_lr, dummy_feat_prop)).save(args.forward_residual_output)
+    basicvsr.forward = basicvsr.forward_upsample
+    if args.upsample_output.endswith('.onnx'):
+        opset_version = 10
+        torch.onnx.export(
+            basicvsr,
+            (dummy_lr, dummy_feat_prop, dummy_feat_prop),
+            args.upsample_output,
+            input_names=['a', 'b', 'c'],
+            output_names=['output'],
+            verbose=True,
+            opset_version=opset_version)
+    else:
+        torch.jit.trace(basicvsr, (dummy_lr, dummy_feat_prop, dummy_feat_prop)).save(args.upsample_output)
+
+if __name__ == '__main__':
+    main()
